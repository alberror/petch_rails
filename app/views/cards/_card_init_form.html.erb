<form class="simple_form new_card pt-5" id="init_card" novalidate="novalidate" action="/cards/new" accept-charset="UTF-8">
  <input type="hidden" name="authenticity_token" value="amkcxyAgTNKwmlCyHLmKCwWVT5ELatUxj+Me0BeG45iGdiJdxY/ihswmKTLhFzI3OgmyV3+Qu/vjXH2U3YZDiA==">
  <div class="radio-wrapper">
    <fieldset class="form-group radio_buttons optional card_animal">
      <input type="hidden" name="card[animal]" value="">

      <div class="row">
        <% Card::ANIMALS.each do |animal| %>
          <div class="col" align="center">
            <div class="form-check animals-form-labels-container">
              <input class="form-check-input optional d-none" type="radio" value="<%= animal %>" name="card[animal]" id="card_animal_<%= animal %>">
              <label id="label-<%= animal %>" class="form-check-label collection_radio_buttons" for="card_animal_<%= animal %>"><%= animal %>
              </label>
            </div>
          </div>
        <% end %>
      </div>

    </fieldset>
    <%# <button id="new-card-submit" class="btn btn-primary">Submit</button> %>
  </div>
</form>

<div class="final-form d-none">
  <%= simple_form_for(card) do |f| %>
    <h3 class="mb-5">Creation d'une fiche pour <span class="animal-name-title"></span></h3>

    <div class="inputs">
      <div class="row">
        <div class="col">

          <!-- COMMON INPUTS -->
          <%= f.hidden_field :animal, class: 'animal-type' %>
          <%= f.input :thumbnail %>
          <%= f.input :title, placeholder: 'Nom', label: false, input_html: { class: 'check'} %>
          <%= f.input :life_expectancy, label: false, placeholder: 'Esperance du vie', input_html: { class: 'check' } %>

          <div class="row">
            <div class="col">
              <%= f.input :min_height, placeholder: 'Taille minimal (cm)', label: false, input_html: { class: 'check'} %>
            </div>
            <div class="col">
              <%= f.input :max_height, placeholder: 'Taille maximal', label: false, input_html: { class: 'check'} %>
            </div>
          </div>
          <div class="row">
            <div class="col">
              <%= f.input :min_weight, placeholder: 'Poid minimal (kg)', label: false, input_html: { class: 'check'} %>
            </div>
            <div class="col">
              <%= f.input :max_weight, placeholder: 'Poid maximal (kg)', label: false, input_html: { class: 'check'} %>
            </div>
          </div>
          <%= f.input :origin, collection: [CONTINENTS, COUNTRIES].flatten, input_html: { class: 'select2 check' }, prompt: 'Origine', label: false %>

          <hr>
          <div id="all-specs" class="d-none">
            <%= @specs %>
          </div>
          <div id="all-ratings" class="d-none">
            <%= @ratings %>
          </div>

          <%= f.hidden_field :specs, class: 'animal-specs' %>
          <%= f.hidden_field :ratings, class: 'animal-ratings' %>
          <div class="row">
            <div class="col-xs-12 col-md-6 animal-specs-display"></div>
            <div class="col-xs-12 col-md-6 animal-ratings-display"></div>
          </div>
        </div>

        

        <!-- SPECIFIC RATINGS -->
        
        <%# <div class="col card-ratings"> %>
          <%#= simple_fields_for :ratings, OpenStruct.new(card.specificities) do |x| %>
            <%# Card::RATINGS[card.animal.to_sym].each do |rating| %>
              <%#= x.input rating, collection: 1..5, input_html: { class: 'rating_field' }  %>
            <%# end %>
          <%# end %>
        <%# </div> %>

      </div>
    </div>

    <hr>

    <%= f.hidden_field :body, class: 'body' %>
    <div id="editor" style="min-height: 400px"></div>

    <%#= f.submit id: 'real-submit', class: 'd-none', disabled: true %>
    <button id="fake-submit" class="btn btn-primary" disabled="true">Feel the Form</button>
  <% end %>
</div>

<script>
  // GET ANIMAL TYPE
  const labels = document.querySelectorAll('.collection_radio_buttons');
  const animalNameTitle = document.querySelector('.animal-name-title');
  const finalForm = document.querySelector('.final-form');
  const animalType = document.querySelector('.animal-type');
  const allSpecs = document.getElementById('all-specs');
  const specsDisplayer = document.querySelector('.animal-specs-display');
  const allRatings = document.getElementById('all-ratings');
  const ratingsDisplayer = document.querySelector('.animal-ratings-display');
  const allRadios = document.getElementsByName('select-stars');


  const formatRatingName =(name) => (
    name.replace(/ /g, '-').replace(/é/g, 'e').replace(/\'/g, '-')
  )

  const ratingsStars = (field) => (`
    <span class="rating">
      <label>
        <input type="radio" name="${formatRatingName(field)}-stars" value="1" class="radio-ratings" />
        <span class="icon">★</span>
      </label>
      <label>
        <input type="radio" name="${formatRatingName(field)}-stars" value="2" class="radio-ratings" />
        <span class="icon">★</span>
        <span class="icon">★</span>
      </label>
      <label>
        <input type="radio" name="${formatRatingName(field)}-stars" value="3" class="radio-ratings" />
        <span class="icon">★</span>
        <span class="icon">★</span>
        <span class="icon">★</span>   
      </label>
      <label>
        <input type="radio" name="${formatRatingName(field)}-stars" value="4" class="radio-ratings" />
        <span class="icon">★</span>
        <span class="icon">★</span>
        <span class="icon">★</span>
        <span class="icon">★</span>
      </label>
      <label>
        <input type="radio" name="${formatRatingName(field)}-stars" value="5" class="radio-ratings" />
        <span class="icon">★</span>
        <span class="icon">★</span>
        <span class="icon">★</span>
        <span class="icon">★</span>
        <span class="icon">★</span>
      </label>
    </span>
  `);

  // TYPE OBJECT
  // ITERER SUR L'OBJET ET PLACER UN EVENT LISTENER POUR ECOUTER LES CHANGEMENTS D'INPUT ET LES AJOUTER
  // A L'ARRAY DES RATINGS SELECTIONNES
  const listenToRating = (value) => {
    const ratings = document.getElementsByName(`${value}-stars`)
    console.log(typeof ratings)
    // .forEach((rating) => {
    //   console.log('coucou');
      // rating.addEventListener('change', (e) => {
      //   console.log(e);
      // });
  //   });    
   };


  let selectedSpecs = [];
  let selectedRatings = [];

  const buildValues = (values) => {
    let finalString = '';

    values.map(value => {
      finalString += `<option value="${value}">${value}</option>`;
    });

    return finalString;
  };

  const buildSpecs = (specs) => {
    let finalString = '';

    Object.entries(specs).map((k) => {
      const values = buildValues(k[1]);
      finalString += `<div class="specs-row d-flex justify-content-between py-1 w-100"><label for="${k[0]}-select">${k[0]}</label><select name="${k[0]}" id="${k[0]}-select" onchange="addToHiddenField(event)"><option value ="">...</option>${values}</select></div>`;
    });

    return finalString;
  };

  const buildRatings = (ratings) => {
    let finalString = '';

    Object.values(ratings).map((v) => {
      finalString += `<div class="ratings-row d-flex align-items-center justify-content-between py-1"><div class="ratings-label">${v}</div><div class="ratings-stars">${ratingsStars(v)}</div></div>`
    });

    Object.values(ratings).forEach((v) => {
      listenToRating(formatRatingName(v));
    });

    return finalString;
  };

  // allRadios.forEach((radio) => {
  //   radio.addEventListener('change', (e) => {
  //     console.log(e);
  //   });
  // });

  // SELECT ANIMAL
  labels.forEach(label => {
    label.addEventListener("click", e => {
      const selectedAnimal = e.target["id"].replace("label-", "");
      const selectedSpecs = JSON.parse(allSpecs.innerText)[selectedAnimal];
      const selectedRatings = JSON.parse(allRatings.innerText)[selectedAnimal];

      animalNameTitle.innerText = selectedAnimal;
      animalType.innerHTML = selectedAnimal;
      finalForm.classList.remove('d-none');

      specsDisplayer.innerHTML = buildSpecs(selectedSpecs);
      ratingsDisplayer.innerHTML = buildRatings(selectedRatings);
    });
  });

  // PUSH TO HIDDEN FIELD
  const addToHiddenField = (event) => {
    const key = event.target.id.replace("-select", "");
    const value = event.target.value;
    const object = {};

    object[`${key}`] = value;

    selectedSpecs.push(object);
  }


  // SUBMIT FORM
  const submitForm = () => {
      const simpleSpecs = document.querySelector(".animal-specs");
      simpleSpecs.value = selectedTags;
    };

  document
      .getElementById("fake-submit")
      .addEventListener("click", submitForm);
  
</script>
